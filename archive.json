{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2020-11-19T00:02:14.606078+00:00",
  "repo": "NTAP/rfc8312bis",
  "labels": [
    {
      "name": "design",
      "description": "Normative change relative to RFC8312",
      "color": "d73a4a"
    },
    {
      "name": "editorial",
      "description": "Editorial change relative to RFC9312",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU3NDI4NTEzNzA=",
      "title": "Update K definition (Eq. 2) to account for Fast Convergence",
      "url": "https://github.com/NTAP/rfc8312bis/issues/1",
      "state": "OPEN",
      "author": "WesleyRosenblum",
      "authorAssociation": "NONE",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "As discussed in [this tcpm thread](https://mailarchive.ietf.org/arch/msg/tcpm/O7Q55oXcoI1XNBZ_wAQOMdhRQNY/), after fast convergence (section 4.6), the candidate target value of the congestion window may be less than the current congestion window. For example, say cwnd = 100, beta_cubic = .7 and a congestion event occurs:\r\n\r\n```\r\nW_max = cwnd = 100;\r\nW_max = W_max*(1.0+beta_cubic)/2.0 = 85   // further reduce W_max for fast convergence\r\n\r\ncwnd = cwnd * beta_cubic = 70\t          // window reduction\r\nW_cubic(0) = W_max * beta_cubic = 59.5\r\n```\r\n\r\nIf we were to enter congestion avoidance at this point, with a small enough RTT, the candidate target congestion window as calculated by W_cubic(t+RTT) may be less than the current congestion window (~59.5 < 70). \r\n\r\nThe suggestion in the thread from Lisong Xu and Vidhi Goel is to change Equation 2 to:\r\n```\r\nK = cubic_root((W_max - cwnd)/C) (Eq. 2)\r\n```\r\nwhere cwnd is the congestion window size at the beginning of the current congestion avoidance. This will ensure the target is greater than the current congestion window, and in my opinion is a more clear representation of what K represents.",
      "createdAt": "2020-11-13T23:36:02Z",
      "updatedAt": "2020-11-18T23:39:46Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we can change Equation 2 in the RFC to the following equation where cwnd is the cwnd at the beginning of the current congestion avoidance stage. \r\n\r\n`\r\nK = cubic_root((W_max - cwnd)/C)  (Eq. 2)\r\n`\r\n\r\nTo be exactly consistent with the Linux Cubic implementation, we can change Equation 2 to the following statement, where cwnd is still the cwnd at the beginning of the current congestion avoidance stage. \r\n\r\n`\r\nif (cwnd < W_max)\r\n  K = cubic_root((W_max - cwnd)/C)  \r\nelse{\r\n  K = 0  \r\n  W_max = cwnd\r\n}\r\n\r\n`\r\n\r\nThank you!\r\n",
          "createdAt": "2020-11-14T22:14:57Z",
          "updatedAt": "2020-11-14T22:14:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu thanks for confirming that Linux is doing something very similar! We should poll other implementors to see if they are already doing this, or would start to if we were to make this change.\n\n@goelvidhi could you update the PR accordingly?",
          "createdAt": "2020-11-15T08:24:09Z",
          "updatedAt": "2020-11-15T08:24:09Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu, in the below equation, setting W_max = cwnd seems superfluous. Also, next time we want to compute K, it will enter the first condition and end up with K = 0.\r\n```\r\nif (cwnd < W_max)\r\nK = cubic_root((W_max - cwnd)/C)\r\nelse{\r\nK = 0\r\nW_max = cwnd\r\n}",
          "createdAt": "2020-11-16T07:12:36Z",
          "updatedAt": "2020-11-16T07:12:52Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu We may remove W_max = cwnd under the else {} since this is about how we compute K? Sections on convex and concave regions already explained what happens when cwnd is greater than equal to Wmax.",
          "createdAt": "2020-11-17T04:23:18Z",
          "updatedAt": "2020-11-17T04:23:18Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "We calculate K only once at the beginning of a congestion avoidance stage.  \r\n\r\nStatement \"W_max = cwnd\" corresponds to line 249 of [https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L249](url).  Without this statement, the new cwnd calculated at t=0 using Equation (1) would be even lower than the current cwnd.\r\n`\r\nW_cubic(t) = C*(t-K)^3 + W_max (Eq. 1)\r\n`\r\n\r\nBut I agree that we should not change W_max, as W_max is also used by fast convergence. \r\n\r\nMaybe we should introduce a new variable origin_point as Linux does. \r\n\r\nAt the beginning of a congestion avoidance stage, we set the value of K and origin_point as follows\r\n\r\n```\r\nif (cwnd < W_max)\r\n{\r\n    K = cubic_root((W_max - cwnd)/C)\r\n    origin_point = W_max\r\n}\r\nelse\r\n{\r\n    K = 0\r\n    origin_point = cwnd\r\n}\r\n```\r\n\r\nDuring the congestion avoidance stage, we calculate cwnd as follows\r\n\r\n`\r\nW_cubic(t) = C*(t-K)^3 + origin_point (Eq. 1)\r\n`\r\n\r\n\r\n \r\n",
          "createdAt": "2020-11-17T05:09:24Z",
          "updatedAt": "2020-11-17T05:09:24Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree. Yes, without a new variable, it is hard. Now, it is closer to Linux implementation.",
          "createdAt": "2020-11-17T05:17:31Z",
          "updatedAt": "2020-11-17T05:17:31Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu this is exactly what we do for Apple's CUBIC as well.\r\n\r\nI am open to adding `origin_point` if there is no objection about additional complexity.",
          "createdAt": "2020-11-17T06:27:57Z",
          "updatedAt": "2020-11-17T06:27:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "I'd say let's add it. @pravb is Windows is doing something similar?",
          "createdAt": "2020-11-17T06:29:42Z",
          "updatedAt": "2020-11-17T06:30:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I want to add a clarification point to my previous comment about the below code. We do this only when we enter CA without any loss i.e. when cwnd > ssthresh.\r\n\r\n```\r\nif (cwnd < W_max)\r\n{\r\n    K = cubic_root((W_max - cwnd)/C)\r\n    origin_point = W_max\r\n}\r\nelse\r\n{\r\n    K = 0\r\n    origin_point = cwnd\r\n}\r\n```\r\n\r\nNote that at the beginning of CA, we should only do the below, as we want to start with W_max and not current value of cwnd. Also, as W_max will be greater than cwnd at the start of CA, the else condition doesn't apply.\r\n```\r\nK = cubic_root((W_max - cwnd)/C)\r\norigin_point = W_max\r\n```\r\n\r\nSo, I think we can leave Eq. 1 as is.",
          "createdAt": "2020-11-17T07:26:13Z",
          "updatedAt": "2020-11-17T07:26:13Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "There is another important difference between this RFC and Linux TCP in fast recovery. RFC assumes that cwnd is set to W_max * beta_cubic in fast recovery and remains as W_max * beta_cubic at the beginning of a congestion avoidance stage. However, the behavior of Linux TCP in/around fast recovery is complicated, such as adjusting cwnd based on the number of packets in flight, and adjusting cwnd in case of undo. As a result, at the beginning of a congestion avoidance stage, cwnd may or may not be W_max * beta_cubic, and sometimes may be even higher than W_max. \r\n\r\nI guess this RFC does not need to follow the fast recovery of Linux TCP, but it is safer to add that else condition. \r\n\r\nThanks",
          "createdAt": "2020-11-17T14:19:14Z",
          "updatedAt": "2020-11-17T14:19:14Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes,  @goelvidhi   you are right that we do this only when cwnd > ssthresh",
          "createdAt": "2020-11-17T14:20:07Z",
          "updatedAt": "2020-11-17T14:20:07Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "> @lisongxu this is exactly what we do for Apple's CUBIC as well.\r\n> \r\n> I am open to adding `origin_point` if there is no objection about additional complexity.\r\n\r\nThanks, @goelvidhi for confirming Apple's implementation!",
          "createdAt": "2020-11-17T15:19:21Z",
          "updatedAt": "2020-11-17T15:19:21Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "Rather than patching the K computation, why not set (after applying the fast convergence logic to W_max)\r\nCWnd = BETA * W_max\r\n\r\nrather than\r\nCWnd = BETA * CWnd\r\n\r\nwhen we reduce the window? I.e., wrap the fast-convergence reduction into both W_max and the CWnd. That seems more harmonious with the fast convergence algorithm, and at least for me, it's easier to reason about its effect.",
          "createdAt": "2020-11-17T19:49:38Z",
          "updatedAt": "2020-11-17T19:49:38Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft Yes, that is another possible design choice. The main reason to update the K equation is to revise the RFC to be consistent with the Linux cubic implementation and the original paper.  Thanks",
          "createdAt": "2020-11-18T02:13:37Z",
          "updatedAt": "2020-11-18T02:13:37Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft that would also require updating `ssthresh`, otherwise we will end up in slow start. I think the current approach is fine.",
          "createdAt": "2020-11-18T05:42:20Z",
          "updatedAt": "2020-11-18T05:42:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu I updated the Eq. 2 with an else condition. Also, added some text for how cwnd can be set. Could you please review https://github.com/NTAP/rfc8312bis/pull/3?",
          "createdAt": "2020-11-18T06:17:47Z",
          "updatedAt": "2020-11-18T06:17:47Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "If we do not use variable origin_point, then it is possible that W_cubic(t) may be lower than the current cwnd.  In this case, I would suggest changing Equation (1) as follows, which also contains the bug fix. \r\n```\r\n    W_cubic(t) = C*(t-K)^3 + W_max\r\n    if (W_cubic(t) < cwnd)                      // lower bound\r\n        W_cubic(t)  =  cwnd\r\n    else if (W_cubic(t) > 2* cwnd)              // upper bound\r\n        W_cubic(t)  =  2 * cwnd\r\nwhere cwnd is the current congestion window size.\r\n```\r\n\r\nBelow is a slightly revised Equation (2)\r\n```\r\n   if (cwnd_0 < W_max) {\r\n        K = cubic_root(W_max - cwnd_0) / C             \r\n    } else {\r\n        K = 0\r\n    }\r\nwhere cwnd_0 is the congestion window at the beginning of a congestion avoidance stage, is calculated using beta_cubic in {{mult-dec}}, although implementations can further adjust the congestion window size based on other fast recovery mechanisms. We discuss how we set beta_cubic in {{mult-dec}} and how we set C in {{discussion}}.\r\n```\r\n",
          "createdAt": "2020-11-18T14:24:57Z",
          "updatedAt": "2020-11-18T14:24:57Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Why aren't we using origin_point?",
          "createdAt": "2020-11-18T14:36:28Z",
          "updatedAt": "2020-11-18T14:36:28Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "As we initially thought that the origin_point was needed only when cwnd > ssthresh without loss.\r\n\r\nBut @lisongxu mentioned, cwnd could become greater than W_max at the start of CA (after a congestion event). I want to understand in what case would it become greater. \r\n1. Using bytes in flight shouldn't set cwnd greater than W_max\r\n2. For any undo, W_max should also be undo'ed.\r\n\r\nAnything else?",
          "createdAt": "2020-11-18T23:32:39Z",
          "updatedAt": "2020-11-18T23:39:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> If we do not use variable origin_point, then it is possible that W_cubic(t) may be lower than the current cwnd. In this case, I would suggest changing Equation (1) as follows, which also contains the bug fix.\r\n> \r\n> ```\r\n>     W_cubic(t) = C*(t-K)^3 + W_max\r\n>     if (W_cubic(t) < cwnd)                      // lower bound\r\n>         W_cubic(t)  =  cwnd\r\n>     else if (W_cubic(t) > 2* cwnd)              // upper bound\r\n>         W_cubic(t)  =  2 * cwnd\r\n> where cwnd is the current congestion window size.\r\n> ```\r\n> \r\n> Below is a slightly revised Equation (2)\r\n> \r\n> ```\r\n>    if (cwnd_0 < W_max) {\r\n>         K = cubic_root(W_max - cwnd_0) / C             \r\n>     } else {\r\n>         K = 0\r\n>     }\r\n> where cwnd_0 is the congestion window at the beginning of a congestion avoidance stage, is calculated using beta_cubic in {{mult-dec}}, although implementations can further adjust the congestion window size based on other fast recovery mechanisms. We discuss how we set beta_cubic in {{mult-dec}} and how we set C in {{discussion}}.\r\n> ```\r\n\r\nIf I use cwnd_0 (which is beta_cubic * W_max) , then I don't need the else condition, right?",
          "createdAt": "2020-11-18T23:38:40Z",
          "updatedAt": "2020-11-18T23:39:07Z"
        }
      ]
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU3NDI5MzYxODU=",
      "title": "Congestion window TCP friendly region after W_max",
      "url": "https://github.com/NTAP/rfc8312bis/issues/2",
      "state": "OPEN",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The idea of using alpha_aimd as defined below is to ensure that the congestion window growth for Cubic is similar to standard TCP as Cubic's reduction factor (0.3) is smaller than that of standard TCP (0.5)\r\n\r\nCurrently, alpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic) // for the entire TCP friendly region\r\n\r\nBut we think that once the cwnd in TF region reaches W_max, we should set the alpha_aimd to 1 to have similar behavior as standard TCP congestion algorithm (eg. NewReno)\r\n\r\nif (W_est < W_max)\r\n\talpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic)\r\nelse\r\n\talpha_aimd = 1\r\n\r\nI'd be happy to work on a PR for this if folks think that this would be a good addition.",
      "createdAt": "2020-11-14T06:01:03Z",
      "updatedAt": "2020-11-18T21:32:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, you are right that once cwnd reaches W_max, we should set alpha_aimd (or the delta variable in Linux) to 1 to make sure that CUBIC has at least the same throughput as the standard TCP. \r\n\r\nBut if the purpose of this RFC is to document the current Linux CUBIC implementation, then we do not need to change it. ",
          "createdAt": "2020-11-14T22:29:47Z",
          "updatedAt": "2020-11-16T07:24:18Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu Is this a change that should be committed to Linux?\n\nWe should also poll other implementations if they are doing something similar to what is proposed already, or would start doing so if we made the change.",
          "createdAt": "2020-11-15T08:25:37Z",
          "updatedAt": "2020-11-15T08:25:37Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Correct me if I am wrong, but I think the purpose of an RFC should be to document what would be the right behavior for the algorithm instead of what a particular implementation is doing. Having said that, as Linux is widely used OS, I think it would be good to commit this to Linux if we agree that this is a required change.\r\n\r\n@larseggert what is the best way to start a poll for other implementations? A slack channel?\r\n\r\n",
          "createdAt": "2020-11-16T07:17:44Z",
          "updatedAt": "2020-11-16T07:17:54Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi RFC8312 was specifically written because there was no accurate CUBIC specification at the time other than the Linux source code (the paper algorithm was outdated.) I think we should try and stick to this for the revision, i.e., document the CUBIC variant that is used in production now, in Linux and other stacks.\r\n\r\nThat said, *if* there are modifications that we want to propose that would further improve CUBIC beyond what current implementations are doing, that is possible. But I'd like to then see if Linux and other stacks would be open to implementing these improvements -- I wouldn't want to end up with a CUBIC spec that is (again) divergent from what the main stacks do (in some aspects).\r\n\r\nAs for how to ask, I think an email to the TCPM WG mailing list with a pointer to the respective GitHub issue/PR works best.",
          "createdAt": "2020-11-16T07:24:03Z",
          "updatedAt": "2020-11-16T07:24:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I am not sure, but I guess this change has little impact on the cubic performance, especially in highspeed networks.  Thanks",
          "createdAt": "2020-11-17T02:28:51Z",
          "updatedAt": "2020-11-17T02:28:51Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "I can speak for Windows TCP and MsQuic, and this proposal isn't done in either today.\r\n\r\nIf you just change the slope but not the base of the linear function, then I think you'll see a jump discontinuity in the window. That's a problem for Windows TCP because we don't pace by default. To avoid the jump discontinuity, you could rebase the linear function:\r\n\r\ninstead of the proposed\r\nW_est(t) = W_max*BETA + t/RTT\r\n[where t = time in congestion avoidance],\r\n\r\nyou could do\r\nW_est(t) = W_max + t/RTT\r\n[where t = time since W_est hit W_max].\r\n\r\nSomething like that. But of course, if this isn't going to substantially affect perf in real scenarios, I'd rather not risk the bugs from making this change.",
          "createdAt": "2020-11-17T19:28:23Z",
          "updatedAt": "2020-11-17T21:06:05Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@maolson-msft \r\nThe W_est equation is\r\nW_est(t)= W_max*beta_cubic +\r\n                   [3*(1-beta_cubic)/(1+beta_cubic)] * (t/RTT)\r\n\r\nwhere alpha_aimd = 3*(1-beta_cubic)/(1+beta_cubic)\r\n\r\nAnd the suggestion is to set alpha_aimd to 1 after W_est hit W_max for parity with New Reno.\r\n\r\n",
          "createdAt": "2020-11-18T09:37:51Z",
          "updatedAt": "2020-11-18T09:37:51Z"
        },
        {
          "author": "maolson-msft",
          "authorAssociation": "NONE",
          "body": "@goelvidhi , setting alpha to 1 reduces the RFC's current equation to W_est(t) = W_max*BETA + t/RTT, which is the equation I wrote. Sorry if that was unclear.",
          "createdAt": "2020-11-18T21:32:26Z",
          "updatedAt": "2020-11-18T21:32:26Z"
        }
      ]
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU3NDM2NzEyMjU=",
      "title": "Code to re-generate tables",
      "url": "https://github.com/NTAP/rfc8312bis/issues/4",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "larseggert"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Does anyone have code to (re-)generate Tables 1, 2 and 3 for when we make changes to the math?",
      "createdAt": "2020-11-16T09:26:30Z",
      "updatedAt": "2020-11-18T08:08:36Z",
      "closedAt": "2020-11-18T08:08:36Z",
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I do have the code.  But we do not need to change these tables for the changes that we have discussed so far.  Thanks",
          "createdAt": "2020-11-17T02:36:27Z",
          "updatedAt": "2020-11-17T02:36:27Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Do you think it might be a good idea to add that code to the repo anyway, so we have it handy in the future?",
          "createdAt": "2020-11-17T05:02:03Z",
          "updatedAt": "2020-11-17T05:02:03Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Sure, here is the code to generate the cubic columns in tables 1 and 2. \r\n\r\n```\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\ndouble ww(double C, double RTT, double p){\r\n\tdouble w, tcp;\r\n\tw = pow(RTT, 0.75);\r\n\tw = w / pow(p, 0.75);\r\n\tw = w * pow(C*3.7/1.2, 0.25);\r\n\r\n\ttcp = 1.2*pow(1.0/p, 0.5);\r\n\r\n\tif (tcp>w)\r\n\t\treturn (int)(tcp+0.5);\r\n\telse\r\n\t\treturn (int)(w+0.5);\r\n}\r\n\r\nint main(){\r\n\tdouble p;\r\n\tint i;\r\n\r\n\tfor(i=2;i<=8;i++){\r\n\t\tp = pow(10, -i);\r\n\t\tprintf(\"%g\\t\", p);\r\n\t\tprintf(\"||%g\\t%g\\t%g\\t||\", ww(0.04, 0.1, p), ww(0.4, 0.1, p), ww(4, 0.1, p));\r\n\t\tprintf(\"%g\\t%g\\t%g\\t\\n\", ww(0.04, 0.01, p), ww(0.4, 0.01, p), ww(4, 0.01, p));\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n```",
          "createdAt": "2020-11-17T05:12:14Z",
          "updatedAt": "2020-11-17T05:12:14Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks!",
          "createdAt": "2020-11-17T05:14:33Z",
          "updatedAt": "2020-11-17T05:14:33Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@lisongxu the code seems to not compute the TCP and HSTCP columns?",
          "createdAt": "2020-11-17T14:31:23Z",
          "updatedAt": "2020-11-17T14:31:23Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I made some changes to the code to print out all the columns of Tables 1 and 2.\r\n\r\n```\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nlong reno(double p){\r\n    return round(1.2/pow(p, 0.5));\r\n}\r\n\r\n\r\nlong hstcp(double p){\r\n    long cwnd, tcp_friend;\r\n\r\n    cwnd = round(0.12/pow(p, 0.835));\r\n    \r\n    tcp_friend = reno(p);\r\n\r\n    if (tcp_friend > cwnd)\r\n        return tcp_friend;\r\n    else\r\n        return cwnd;\r\n}\r\n\r\nlong cubic(double C, double RTT, double p){\r\n    double w;\r\n    long cwnd, tcp_friend;\r\n    \r\n    w = pow(RTT, 0.75);\r\n    w = w / pow(p, 0.75);\r\n    w = w * pow(C*3.7/1.2, 0.25);\r\n    cwnd = round(w);\r\n\r\n    tcp_friend = reno(p);\r\n\r\n    if (tcp_friend > cwnd)\r\n        return tcp_friend;\r\n    else\r\n        return cwnd;\r\n}\r\n\r\nint main(){\r\n    double p;\r\n    int i;\r\n\r\n\r\n    printf(\"Table 1\\n\");\r\n    printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", \"P\", \"TCP\", \"HSTCP\", \"C=0.04\", \"C=0.4\", \"C=4\");\r\n    for(i=2;i<=8;i++){\r\n    p = pow(10, -i);\r\n        printf(\"%.1e\\t\", p);\r\n        printf(\"%ld\\t%ld\\t%ld\\t%ld\\t%ld\\n\", reno(p), hstcp(p), cubic(0.04, 0.1, p), cubic(0.4, 0.1, p), cubic(4, 0.1, p));\r\n    }\r\n\r\n\r\n    printf(\"Table 2\\n\");\r\n    printf(\"%s\\t%s\\t%s\\t%s\\t%s\\t%s\\n\", \"P\", \"TCP\", \"HSTCP\", \"C=0.04\", \"C=0.4\", \"C=4\");\r\n    for(i=2;i<=8;i++){\r\n        p = pow(10, -i);\r\n        printf(\"%.1e\\t\", p);\r\n        printf(\"%ld\\t%ld\\t%ld\\t%ld\\t%ld\\n\", reno(p), hstcp(p), cubic(0.04, 0.01, p), cubic(0.4, 0.01, p), cubic(4, 0.01, p));\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n```",
          "createdAt": "2020-11-17T15:14:50Z",
          "updatedAt": "2020-11-17T15:14:50Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Thanks! I will update the PR tomorrow.",
          "createdAt": "2020-11-17T15:29:37Z",
          "updatedAt": "2020-11-17T15:29:37Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU3NDM3MzU3ODc=",
      "title": "List of variables and constants",
      "url": "https://github.com/NTAP/rfc8312bis/issues/5",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It would be useful to add a consolidated list of all constants and variables with their units and a brief description.",
      "createdAt": "2020-11-16T10:54:14Z",
      "updatedAt": "2020-11-17T14:16:57Z",
      "closedAt": null,
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I can help with this",
          "createdAt": "2020-11-17T02:16:42Z",
          "updatedAt": "2020-11-17T02:16:42Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you, Vidhi!\r\n",
          "createdAt": "2020-11-17T02:37:54Z",
          "updatedAt": "2020-11-17T02:37:54Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWU3NDM3NDA5ODE=",
      "title": "Units are missing or unclear",
      "url": "https://github.com/NTAP/rfc8312bis/issues/6",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "@martinthomson raised this on the QUIC slack:\r\n> What are the units of C?  What are the units of t? (edited) \r\nI'm assuming that the units of W_cubic(t) and W_max are bytes (or multiples of MSS, I guess).  But what about W_est(t)?\r\nW_est(t) = W_max*0.7 + 1.1 * t / RTT\r\n(Numbers approximated.)  That's a component in bytes, and a unit-less component. ",
      "createdAt": "2020-11-16T11:01:44Z",
      "updatedAt": "2020-11-17T14:16:12Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Copied from the beginning of Section 4: \"The unit of all window sizes in this document is segments of the  maximum segment size (MSS), and the unit of all times is seconds.\"  ",
          "createdAt": "2020-11-17T02:40:37Z",
          "updatedAt": "2020-11-17T02:40:37Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "So all variables either window sizes or times?",
          "createdAt": "2020-11-17T04:52:22Z",
          "updatedAt": "2020-11-17T04:52:52Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "If I did my math correctly ... \r\n\r\nUnit of C : MSS / (Second^3)\r\nUnit of K : Second\r\n\r\n",
          "createdAt": "2020-11-17T05:20:13Z",
          "updatedAt": "2020-11-17T05:20:13Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I think,\r\nC is 1/ S^3 \r\nt is time in sec\r\nK is time in sec\r\nAll Ws are in packets. (W_est is also in packets and packets don't have any units)",
          "createdAt": "2020-11-17T05:29:46Z",
          "updatedAt": "2020-11-17T05:29:46Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "What would be the best place to add these units? Next to the equation or the section where all variables would be described? (ref. https://github.com/NTAP/rfc8312bis/issues/5)",
          "createdAt": "2020-11-17T05:31:48Z",
          "updatedAt": "2020-11-17T05:31:48Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Where we explain C, t, K, Wmax, etc.? ",
          "createdAt": "2020-11-17T06:06:20Z",
          "updatedAt": "2020-11-17T06:06:20Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "that should be fine too. But there was an issue #5 to define the variables with units. I was thinking to put it all at one place and then remove redundant explanations.",
          "createdAt": "2020-11-17T06:30:11Z",
          "updatedAt": "2020-11-17T06:30:36Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi I think consolidating it as you suggest (e.g., into a table) is probably best.",
          "createdAt": "2020-11-17T06:31:21Z",
          "updatedAt": "2020-11-17T06:31:21Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi The unit of all windows should be MSS (or segment), and then the unit of C should be MSS / S^3 ? Thanks",
          "createdAt": "2020-11-17T14:04:17Z",
          "updatedAt": "2020-11-17T14:04:17Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "MDU6SXNzdWU3NDM3NDIyNDU=",
      "title": "cwnd can now be less than 2",
      "url": "https://github.com/NTAP/rfc8312bis/issues/7",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "@martinthomson raised this on the QUIC slack:\r\n```\r\n      W_max = cwnd;                 // save window size before reduction\r\n      ssthresh = cwnd * beta_cubic; // new slow-start threshold\r\n      ssthresh = max(ssthresh, 2);  // threshold is at least 2 MSS\r\n      cwnd = cwnd * beta_cubic;     // window reduction\r\n```\r\n>cwnd can now be less than 2.",
      "createdAt": "2020-11-16T11:03:25Z",
      "updatedAt": "2020-11-17T15:28:19Z",
      "closedAt": "2020-11-17T15:28:19Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah.. for this code, a simple fix would be:\r\n```\r\nW_max = cwnd;                 // save window size before reduction\r\n      ssthresh = cwnd * beta_cubic; // new slow-start threshold\r\n      ssthresh = max(ssthresh, 2);  // threshold is at least 2 MSS\r\n      cwnd = ssthresh;                    // window reduction\r\n```\r\nI can work on this one, if no one else is.",
          "createdAt": "2020-11-17T02:18:36Z",
          "updatedAt": "2020-11-17T02:18:36Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, Linux also implements it this way. ",
          "createdAt": "2020-11-17T02:38:50Z",
          "updatedAt": "2020-11-17T02:38:50Z"
        }
      ]
    },
    {
      "number": 10,
      "id": "MDU6SXNzdWU3NDQ0MTgyNTY=",
      "title": "Highlight difference to paper",
      "url": "https://github.com/NTAP/rfc8312bis/issues/10",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "NONE",
      "assignees": [
        "sangtaeha"
      ],
      "labels": [
        "editorial",
        "help wanted"
      ],
      "body": "Would be nice to highlight what has changed from the original paper as that paper is still a good source to start with and understand cubic.",
      "createdAt": "2020-11-17T05:15:38Z",
      "updatedAt": "2020-11-17T15:16:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "RFC 8312 was close to the original paper, and this version clarifies a few implementation details. This is more like we explain the difference between RFC 8312 and a new version. @larseggert and @lisongxu If you want to include this, I can help. We may have to use a separate section for this information? ",
          "createdAt": "2020-11-17T05:49:32Z",
          "updatedAt": "2020-11-17T05:49:32Z"
        },
        {
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "body": "Yes, a separate section (or an appendix) makes sense. I think discussing both the changes from the paper to RFC8312 and from RFC8312 to this document (RFC8312bis) would make sense?",
          "createdAt": "2020-11-17T06:14:49Z",
          "updatedAt": "2020-11-17T06:14:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "NONE",
          "body": "Actually the main reason why I checked the paper is because it has the pseudo code. I also look at the linux implementation but that's much harder to understand, especially if your implementation doesn't need the same optimisations. Might be also worth discussing in an appendix. ",
          "createdAt": "2020-11-17T06:30:51Z",
          "updatedAt": "2020-11-17T06:30:51Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@mirjak I agree.",
          "createdAt": "2020-11-17T06:32:22Z",
          "updatedAt": "2020-11-17T06:32:22Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @sangtaeha for helping with this section",
          "createdAt": "2020-11-17T15:15:42Z",
          "updatedAt": "2020-11-17T15:16:34Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "MDU6SXNzdWU3NDQ0MzQ0MzQ=",
      "title": "Add details about response to ECN marks",
      "url": "https://github.com/NTAP/rfc8312bis/issues/11",
      "state": "OPEN",
      "author": "mohittahiliani",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "It would be nice to describe how a CUBIC sender should respond to ECN marks from the receiver. On receiving an ECE mark, the Linux CUBIC enters a CWR state and follows PRR.\r\n\r\nMore details about this are available in the document:\r\nhttps://docs.google.com/document/d/1QiDqBo94wKr1eptTFe6xAB0RWWlwYOy8VLOWrpVAie8/edit",
      "createdAt": "2020-11-17T05:52:58Z",
      "updatedAt": "2020-11-18T19:37:05Z",
      "closedAt": null,
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@mohittahiliani In fact, CUBIC is not different from the other CCs (e.g., NewReno/SACK) in dealing with ECN marks (treating as a congestion event). Responding to ECN is always beneficial for loss-based algorithms. Yes, we can add that. ",
          "createdAt": "2020-11-17T16:54:56Z",
          "updatedAt": "2020-11-17T16:54:56Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "This was discussed during IETF 109 tcpm meeting. I think what @mohittahiliani was referring to was to document CWR and PRR as done in Linux on ECN which is probably not the same reaction as 3 dup ACKs.\r\n\r\nI am not sure if we want to document this behavior of Linux on ECN signaling.",
          "createdAt": "2020-11-18T07:44:48Z",
          "updatedAt": "2020-11-18T07:44:48Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi @mohittahiliani If so, all standard loss-based TCP CCs in Linux will do the same for ECN. PRR is how Linux reduces its cwnd and different platforms could do differently. By the way, CUBIC treats ECN as a loss event and sets W_max upon receiving ECN-Echo, which may be enough?  The current draft already has the following.\r\n\r\n~~~\r\nAfter a window reduction in response to a congestion event is detected by \r\nduplicate ACKs or Explicit Congestion Notification-Echo (ECN-Echo) ACKs [RFC3168], \r\nCUBIC registers the congestion window size where it got the congestion event \r\nas W_max and performs a multiplicative decrease of congestion window.\r\n~~~",
          "createdAt": "2020-11-18T08:39:04Z",
          "updatedAt": "2020-11-18T08:44:21Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "I did point out this text to @mohittahiliani during the tcpm meeting.\r\nI agree that we don't have to document the CWR and PRR for CUBIC specifically.",
          "createdAt": "2020-11-18T09:32:32Z",
          "updatedAt": "2020-11-18T09:32:32Z"
        },
        {
          "author": "tomhenderson",
          "authorAssociation": "NONE",
          "body": "I might suggest that Section 4.5 on Multiplicative Decrease include an additional sentence \"For both loss and congestion events, the sender MAY employ a fast recovery algorithm to gradually adjust the congestion window to its new reduced value.\"  I believe that without this, implementers will assume that cwnd must be immediately reduced (also because PRR does not mention any applicability to ECN).\r\n\r\nThere is also an opportunity to add ECN support to PRR if that RFC is being revised.",
          "createdAt": "2020-11-18T15:16:45Z",
          "updatedAt": "2020-11-18T15:16:45Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @tomhenderson. We will add that.",
          "createdAt": "2020-11-18T19:37:05Z",
          "updatedAt": "2020-11-18T19:37:05Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWU3NDQ3OTk3NzM=",
      "title": "Some bugs to fix",
      "url": "https://github.com/NTAP/rfc8312bis/issues/14",
      "state": "OPEN",
      "author": "lisongxu",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "design"
      ],
      "body": "Since we are revising this RFC, I guess it is a good time to fix some Cubic bugs reported in [our NSDI 2019 paper](https://www.usenix.org/conference/nsdi19/presentation/sun) .\r\n\r\nThis RFC sets W_cubic(t + RTT) as the target window size after in the next RTT. However, this targe size may be too high, like even higher than 2 * cwnd (i.e., more aggressive than slow start), in the following special cases.\r\n\r\n   * case 1: RTT is extremely long. An extremely long RTT is very likely an indication of network congestion, in such an environment it is dangerous to set a very high target. \r\n\r\n  * case 2: after a long idle period (i.e., a big increase of t). This is a [bug reported and fixed by Google](http://bitsup.blogspot.com/2015/09/).\r\n\r\n  * case 3: after a long application rate-limited period (i.e., a bug increase of t). Similar to case 2\r\n\r\nTo be safer, we may change Equation (1) as follow to fix all the above bugs\r\n\r\n```\r\n    W_cubic(t) = C*(t-K)^3 + origin_point (Eq. 1)\r\n    if (W_cubic (t) > 2* cwnd)\r\n        W_cubic(t)  =  2 * cwnd\r\n```\r\nNote that, Linux Cubic already does something similar ([line 328](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L328)) by limiting target to be no more then 1.5 * cwnd.\r\n\r\nThanks",
      "createdAt": "2020-11-17T14:44:17Z",
      "updatedAt": "2020-11-18T14:28:34Z",
      "closedAt": null,
      "comments": [
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu Agreed. We also include this change in the list of changes for this new revision.",
          "createdAt": "2020-11-17T19:09:52Z",
          "updatedAt": "2020-11-17T19:09:52Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu Below is my response for the three cases you mentioned,\r\n1. At least we use SRTT instead of RTT which mitigates the problem somewhat\r\n2. For any idle period, we reset the epoch period to 0.\r\n3. Same as 2.\r\n\r\nHaving said that, your suggestion is a safe option regardless.\r\n",
          "createdAt": "2020-11-18T06:47:15Z",
          "updatedAt": "2020-11-18T06:47:30Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@larseggert  I can do this change. Feel free to assign :-)",
          "createdAt": "2020-11-18T06:47:56Z",
          "updatedAt": "2020-11-18T06:47:56Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "What I proposed is a simple fix mainly for other implementations. For bug 2, Google already proposed a fix that has been implemented in [Linux](https://github.com/torvalds/linux/blob/master/net/ipv4/tcp_cubic.c#L151) and been adopted into the cubic RFC. (Section 5.8). Thanks ",
          "createdAt": "2020-11-18T14:28:34Z",
          "updatedAt": "2020-11-18T14:28:34Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "MDU6SXNzdWU3NDQ5MTQ3ODk=",
      "title": "Acknowledge previous authors/editors",
      "url": "https://github.com/NTAP/rfc8312bis/issues/15",
      "state": "CLOSED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "larseggert"
      ],
      "labels": [
        "editorial"
      ],
      "body": "In the ack section.",
      "createdAt": "2020-11-17T17:00:00Z",
      "updatedAt": "2020-11-18T08:07:58Z",
      "closedAt": "2020-11-18T08:07:58Z",
      "comments": []
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU3NDUzMTgwNzI=",
      "title": "Add Injong as co-author",
      "url": "https://github.com/NTAP/rfc8312bis/issues/16",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Welcome @injongrhee! Please prepare a pull request to add yourself to the authors' block and `CODEOWNERS`.",
      "createdAt": "2020-11-18T04:27:02Z",
      "updatedAt": "2020-11-18T07:37:38Z",
      "closedAt": null,
      "comments": []
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU3NDU0MTUyMzg=",
      "title": "Add Vidhi as co-author",
      "url": "https://github.com/NTAP/rfc8312bis/issues/17",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [
        "goelvidhi"
      ],
      "labels": [
        "editorial"
      ],
      "body": "@goelvidhi please prepare a pull request to add yourself to the authors' block and `CODEOWNERS`. Welcome aboard!",
      "createdAt": "2020-11-18T07:38:20Z",
      "updatedAt": "2020-11-18T19:40:32Z",
      "closedAt": null,
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you @larseggert and all other Authors.",
          "createdAt": "2020-11-18T07:52:45Z",
          "updatedAt": "2020-11-18T07:52:45Z"
        },
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "Thank you! @goelvidhi ",
          "createdAt": "2020-11-18T19:40:32Z",
          "updatedAt": "2020-11-18T19:40:32Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU3NDU0NDYzMjY=",
      "title": "Replace modelled TCP Reno window approach with AIMD emulation",
      "url": "https://github.com/NTAP/rfc8312bis/issues/20",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Yuchung Cheng [wrote](https://mailarchive.ietf.org/arch/msg/tcpm/KUQtS5nnRA1TaBzF2M2tnmTryGQ):\r\n>I'd recommend replacing the modelled TCP Reno window approach in\r\nsection 4.2 with an AIMD emulation (Linux's approach).\r\n>\r\n>In our experience, TCP-friendly regions are the predominant mode of\r\n(Linux) Cubic for any regular Internet connection. IOW Cubic is often\r\n\"Reno\" unless the loss rate is abysmal. The modelled approach is based\r\non a simple bulk transfer where modern network applications are mostly\r\nstructured traffic (burst, idle, repeat). Under such traffic\r\nstructures the model has two issues:\r\n>\r\n>The model assumes cwnd overshoot causes losses that are repaired in\r\none round of fast recovery. In reality, the losses are often due to\r\nbursts to short messages, causing more rounds and even timeouts to\r\nrepair. So the overall loss rate \"p\" tends to be higher than the ideal\r\nmodel, causing the model to underestimate the window (hence runs in a\r\nmore conservative Reno). Instead Linux's approach is to simply emulate\r\nReno AIMD based on the number of packets per ACK. This also avoids\r\nsquare-root operation.",
      "createdAt": "2020-11-18T08:27:38Z",
      "updatedAt": "2020-11-18T19:40:06Z",
      "closedAt": null,
      "comments": [
        {
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree, and this is reasonable, as CUBIC is based on time t but AIMD is not.  Thanks",
          "createdAt": "2020-11-18T19:40:05Z",
          "updatedAt": "2020-11-18T19:40:05Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIwOTcwNTQ1",
      "title": "redefine the K equation",
      "url": "https://github.com/NTAP/rfc8312bis/pull/3",
      "state": "OPEN",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have tried to address https://github.com/NTAP/rfc8312bis/issues/1. I have kept the Eq. 2 as is and added justification for further simplification / generalization to address the fast convergence issue with Eq. 2.\r\n\r\nI apologize in advance if I created this PR too soon (I thought this is a major issue as most Cubic implementation perform Fast Convergence).",
      "createdAt": "2020-11-14T06:55:10Z",
      "updatedAt": "2020-11-18T23:36:51Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "d3b35ad56a2e66dd10316f5e762a522454793064",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "updated-K",
      "headRefOid": "bd3a378f42c08cbdbe1d8a93d445f7f4bca62e55",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu @sangtaeha could you please review?\r\n(Is there a way I can add reviewers?)",
          "createdAt": "2020-11-18T06:14:57Z",
          "updatedAt": "2020-11-18T06:14:57Z"
        },
        {
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "body": "@goelvidhi Sorry for the confusion. I didn't mean to remove the left parenthesis. (W_max - cwnd)/C needs to be inside the cubic root. So it should be\r\n\r\n~~~\r\nK = cubic_root((W_max - cwnd) / C)\r\n~~",
          "createdAt": "2020-11-18T11:39:16Z",
          "updatedAt": "2020-11-18T11:39:16Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "> @goelvidhi Sorry for the confusion. I didn't mean to remove the left parenthesis. (W_max - cwnd)/C needs to be inside the cubic root. So it should be\r\n> \r\n> ```\r\n> K = cubic_root((W_max - cwnd) / C)\r\n> ~~\r\n> ```\r\n\r\nMy bad. Fixed it",
          "createdAt": "2020-11-18T23:36:50Z",
          "updatedAt": "2020-11-18T23:36:50Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMjEzOTMy",
          "commit": {
            "abbreviatedOid": "06d1ff7"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-16T10:56:32Z",
          "updatedAt": "2020-11-16T10:58:27Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Please add an anchor for this section and use it in this reference, instead of hardcoding the value. (Check how `mult-dec` is used in the current text for an example.)",
              "createdAt": "2020-11-16T10:56:32Z",
              "updatedAt": "2020-11-18T23:35:38Z"
            },
            {
              "originalPosition": 11,
              "body": "I think it would be clearer if Eq. 2 were modified to include a conditional, rather than defining a separate equation for this case. That way, we also wouldn't need to renumber all the following equations.",
              "createdAt": "2020-11-16T10:57:57Z",
              "updatedAt": "2020-11-18T23:35:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc4NjYz",
          "commit": {
            "abbreviatedOid": "2283884"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T02:34:46Z",
          "updatedAt": "2020-11-17T02:34:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Removed this reference in the new text.",
              "createdAt": "2020-11-17T02:34:46Z",
              "updatedAt": "2020-11-18T23:35:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxOTc4ODM1",
          "commit": {
            "abbreviatedOid": "2283884"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T02:35:14Z",
          "updatedAt": "2020-11-17T02:35:15Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Done. Added the conditional based on the issue discussion with @lisongxu ",
              "createdAt": "2020-11-17T02:35:14Z",
              "updatedAt": "2020-11-18T23:35:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTk5OTcw",
          "commit": {
            "abbreviatedOid": "ca6426d"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Left parenthesis is missing. K = cubic_root((W_max - cwnd) / C)\r\nI am okay without origin_point since it is much easier to understand. But Lisong may have his opinion. Other than that it is good to go. ",
          "createdAt": "2020-11-18T08:23:52Z",
          "updatedAt": "2020-11-18T08:23:52Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzE4NTM4",
          "commit": {
            "abbreviatedOid": "6bfb51f"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T10:46:40Z",
          "updatedAt": "2020-11-18T10:46:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIxNzMyMjA0",
      "title": "Enable markdownlint",
      "url": "https://github.com/NTAP/rfc8312bis/pull/8",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-16T15:19:23Z",
      "updatedAt": "2020-11-17T06:41:04Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "89d9cda9fd5cb9ded734d4b380a5e933b00f0607",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "markdownlint",
      "headRefOid": "95749a2d7c1370115b6581b115916176c4c148d9",
      "closedAt": "2020-11-17T06:41:00Z",
      "mergedAt": "2020-11-17T06:41:00Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "5eb2a1fff23bb0d7dd28b32308fd8bbc6811e303"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMTAwMDQy",
      "title": "cwnd reduction on congestion event",
      "url": "https://github.com/NTAP/rfc8312bis/pull/9",
      "state": "MERGED",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change ensures that cwnd can now be less than 2. Resolves https://github.com/NTAP/rfc8312bis/issues/7",
      "createdAt": "2020-11-17T02:45:47Z",
      "updatedAt": "2020-11-17T15:28:20Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "89d9cda9fd5cb9ded734d4b380a5e933b00f0607",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "min-cwnd",
      "headRefOid": "f148f98b5f712ead13caf67d2fd3e4adc7692801",
      "closedAt": "2020-11-17T15:28:19Z",
      "mergedAt": "2020-11-17T15:28:19Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "d3b35ad56a2e66dd10316f5e762a522454793064"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "body": "@lisongxu @sangtaeha could you please review these changes?",
          "createdAt": "2020-11-17T07:31:01Z",
          "updatedAt": "2020-11-17T07:31:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMDYxNDI0",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T06:48:55Z",
          "updatedAt": "2020-11-17T06:48:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTAxNTM2",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "sangtaeha",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T08:01:10Z",
          "updatedAt": "2020-11-17T08:01:10Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyNDc2Njkw",
          "commit": {
            "abbreviatedOid": "f148f98"
          },
          "author": "lisongxu",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-17T15:20:55Z",
          "updatedAt": "2020-11-17T15:20:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyMjU1NjA3",
      "title": "List of variables and constants",
      "url": "https://github.com/NTAP/rfc8312bis/pull/12",
      "state": "OPEN",
      "author": "goelvidhi",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I have tried to add a new section for definition of variables and constants with their respective units. I removed some of the redundant definitions. Resolves https://github.com/NTAP/rfc8312bis/issues/5 and https://github.com/NTAP/rfc8312bis/issues/6",
      "createdAt": "2020-11-17T09:10:30Z",
      "updatedAt": "2020-11-18T23:28:23Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "de7c07989519e3e09988eead849207eeeab05352",
      "headRepository": "goelvidhi/rfc8312bis",
      "headRefName": "variables-definition",
      "headRefOid": "75ba076a3ebf69a213c05f28cee847a2cbb0f1d4",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTYzMjE3",
          "commit": {
            "abbreviatedOid": "8b65755"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2020-11-17T09:19:28Z",
          "updatedAt": "2020-11-17T09:24:01Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Cite the RFC instead of saying \"Standard TCP\", which doesn't really exist?",
              "createdAt": "2020-11-17T09:19:28Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n: Current congestion window in segments.\r\n```",
              "createdAt": "2020-11-17T09:20:11Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            },
            {
              "originalPosition": 35,
              "body": "Should this definition use `cwnd`?",
              "createdAt": "2020-11-17T09:22:49Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\n  window if the TCP-NewReno congestion controller was used.\r\n```",
              "createdAt": "2020-11-17T09:23:41Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMyMTY4NDQy",
          "commit": {
            "abbreviatedOid": "cfecaf9"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-17T09:25:10Z",
          "updatedAt": "2020-11-17T09:25:10Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "sure",
              "createdAt": "2020-11-17T09:25:10Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTUzOTYw",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:09:48Z",
          "updatedAt": "2020-11-18T07:09:49Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Should this be smoothed RTT? I can cite 793 if we agree to call it smoothed RTT",
              "createdAt": "2020-11-18T07:09:49Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTU2OTk4",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:15:51Z",
          "updatedAt": "2020-11-18T07:15:52Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Shouldn't it be RFC6298? And I think it should be SRTT.\r\n\r\nCC'ing @lisongxu @sangtaeha for their input.",
              "createdAt": "2020-11-18T07:15:51Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTczMDM1",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T07:46:06Z",
          "updatedAt": "2020-11-18T07:46:06Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Yes, you are right that we should cite RFC6298. Waiting for other reviewers' input before I make this change.",
              "createdAt": "2020-11-18T07:46:06Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMzE2NDc2",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T10:44:14Z",
          "updatedAt": "2020-11-18T10:44:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This should probably be a subsection?",
              "createdAt": "2020-11-18T10:44:14Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTM2Njgw",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T22:32:54Z",
          "updatedAt": "2020-11-18T22:32:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "ok, will do a subsection under CUBIC Congestion Control",
              "createdAt": "2020-11-18T22:32:54Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTUzNDA4",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T23:04:32Z",
          "updatedAt": "2020-11-18T23:04:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "done. How can I convert the text document to the html version to see how the sections look?",
              "createdAt": "2020-11-18T23:04:32Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTYwODc3",
          "commit": {
            "abbreviatedOid": "19dfd8d"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-11-18T23:20:59Z",
          "updatedAt": "2020-11-18T23:21:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "For some reason, the PR is not getting updated with my new commits to goelvidhi/rfc8312bis. The repo shows the changes but the PR doesn't. What am I doing wrong?",
              "createdAt": "2020-11-18T23:20:59Z",
              "updatedAt": "2020-11-18T23:28:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 13,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyNDU4OTcy",
      "title": "Add the C code for generating (some of) Tables 1 and 2",
      "url": "https://github.com/NTAP/rfc8312bis/pull/13",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-17T14:37:56Z",
      "updatedAt": "2020-11-18T08:08:40Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "ff650b32509149e25c7ce7073e3da927ff1f4733",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "add-table-code",
      "headRefOid": "1d77a514726eac0ab9941223d6239f7a82a0ea01",
      "closedAt": "2020-11-18T08:08:36Z",
      "mergedAt": "2020-11-18T08:08:36Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "de7c07989519e3e09988eead849207eeeab05352"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzMTc1MTg4",
          "commit": {
            "abbreviatedOid": "99743a2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T07:49:56Z",
          "updatedAt": "2020-11-18T07:49:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIyOTkzOTk2",
      "title": "Ack co-authors of RFC8312. Fixes #15.",
      "url": "https://github.com/NTAP/rfc8312bis/pull/18",
      "state": "MERGED",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-18T07:58:02Z",
      "updatedAt": "2020-11-18T08:08:03Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "9b8225c99d12f77e53130470fd1184afa72d0d93",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "ack-prev-authors",
      "headRefOid": "921b72d8727067a6a0640de56ba0754c1f472b67",
      "closedAt": "2020-11-18T08:07:59Z",
      "mergedAt": "2020-11-18T08:07:58Z",
      "mergedBy": "larseggert",
      "mergeCommit": {
        "oid": "6d9d83f0548a0d8941355841cfcd26e2ba9b55b1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 19,
      "id": "MDExOlB1bGxSZXF1ZXN0NTIzMDAyMzM2",
      "title": "Add changelog relative to -00",
      "url": "https://github.com/NTAP/rfc8312bis/pull/19",
      "state": "OPEN",
      "author": "larseggert",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-11-18T08:13:20Z",
      "updatedAt": "2020-11-18T22:31:24Z",
      "baseRepository": "NTAP/rfc8312bis",
      "baseRefName": "main",
      "baseRefOid": "de7c07989519e3e09988eead849207eeeab05352",
      "headRepository": "NTAP/rfc8312bis",
      "headRefName": "changes-from-00",
      "headRefOid": "8aa3dd2607f511122027f5ae15fddb3446d4f01c",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTM1NzM3",
          "commit": {
            "abbreviatedOid": "8aa3dd2"
          },
          "author": "goelvidhi",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-11-18T22:31:24Z",
          "updatedAt": "2020-11-18T22:31:24Z",
          "comments": []
        }
      ]
    }
  ]
}